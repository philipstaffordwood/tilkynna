#
# *************************************************
# Copyright (c) 2019, Grindrod Bank Limited
# License MIT: https://opensource.org/licenses/MIT
# **************************************************
#

only-tags: &only-tags
  filters:
    tags:
      only: /^.*/
    branches:
      ignore: /.*/

version: 2

# NOTE: Several steps have been written to run in a machine executor
# the main reason is that the maven build for sonarqube and unit tests
# use [TestContainers](https://www.testcontainers.org/)

jobs:
  static-analysis:
    machine: true
    working_directory: ~/build
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: "-Xmx3200m"
    steps:
      - checkout
      - restore_cache:
          keys:
            - tilkynna-build-sonar-2-{{ checksum "pom.xml" }}
      - run: mvn clean && mvn dependency:go-offline -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      - save_cache:
          paths:
            - ~/.m2
          key: tilkynna-build-sonar-2-{{ checksum "pom.xml" }}
      - run: |
         mvn clean
         mvn org.jacoco:jacoco-maven-plugin:prepare-agent \
            package \
            sonar:sonar \
                -Dsonar.host.url=https://sonarcloud.io \
                -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                -Dsonar.organization=$SONAR_ORG \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.branch.name=$CIRCLE_BRANCH \
                -Dsonar.exclusions=srcgen/**/*,src/test/**/* \
                -Dsonar.jacoco.reportPaths=target/jacoco.exec
      - store_artifacts:
          path:  target
  test:
    machine: true
    working_directory: ~/build
    
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: "-Xmx3200m"
    steps:
      - checkout
      - restore_cache:
          keys:
            - tilkynna-build-2-{{ checksum "pom.xml" }}
      - run: mvn clean && mvn dependency:go-offline -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      - save_cache:
          paths:
            - ~/.m2
          key: tilkynna-build-2-{{ checksum "pom.xml" }}
      - run: pwd && find .
      - run: mvn clean && mvn test
  license-headers:
    docker:
      - image: maven:3.5.3-jdk-8-alpine
    working_directory: ~/build
    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: "-Xmx3200m "
    steps:
      - checkout
      - restore_cache:
          keys:
            - tilkynna-build-lic-2-{{ checksum "pom.xml" }}
      - run: mvn dependency:go-offline -f pom-rat.xml -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
      - save_cache:
          paths:
            - ~/.m2
          key: tilkynna-build-lic-2-{{ checksum "pom.xml" }} -f pom-rat.xml
      - run: mvn clean -f pom-rat.xml license:check
  docker-build:
    machine: true
    working_directory: ~/build
    steps:
      - checkout
      - run: |
          DOCKER_TAG=branch-build 
          echo "running docker build script" && pwd && ./scripts/docker-build.sh $REPO $IMAGE_NAME $DOCKER_TAG
  docker-build-push:
    machine: true
    working_directory: ~/build
    steps:
      - checkout
      - run: |
          DOCKER_TAG=$CIRCLE_TAG
          echo "running docker build script" && pwd && ./scripts/docker-build-and-push.sh $REPO $IMAGE_NAME $DOCKER_TAG $DOCKER_REPO_HOST $DOCKER_USER $DOCKER_PASS
  fossa-scan:
    machine: true
    working_directory: ~/dokuti-build
    steps:
      # Install Fossa
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash
      # Install Maven
      - run: sudo apt-get update
      - run: sudo apt-get -y install maven
      - checkout
      - run: fossa init
      - run: FOSSA_API_KEY=$FOSSA_API_KEY fossa analyze
      # Note: The 'fossa test' command must be run after the analyze command has been run, as it is dependent on the previous scan.
      - run: fossa test

  generate-axios-client:
    docker:
       - image: openapitools/openapi-generator-cli:latest
    working_directory: ~/repo
    steps:
      - checkout
      - run: mkdir ~/repo/tilkynna-typescript-axios
      - run: /usr/local/bin/docker-entrypoint.sh generate -i ~/repo/doc/tilkynna_api.yml -g typescript-axios -o ~/repo/tilkynna-typescript-axios --model-package=model --api-package=api --additional-properties=withSeparateModelsAndApi=true,modelPropertyNaming=camelCase,npmName=@grindrodbank/tilkynna-api
      - persist_to_workspace:
          root: ~/repo
          paths:
            - tilkynna-typescript-axios

  publish-axios-client:
    working_directory: ~/repo
    docker:
      - image: circleci/node:lts-jessie-browsers-legacy
    steps:
      - attach_workspace:
          at: ~/repo/workspace
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/workspace/tilkynna-typescript-axios/.npmrc
      - run:
          name: Add node modules to the NPM ignore file.
          command: echo 'node_modules/' >> ~/repo/workspace/tilkynna-typescript-axios/.npmignore
      - run:
          name: Run Yarn
          command: cd ~/repo/workspace/tilkynna-typescript-axios && yarn
      - run:
          name: Build with Yarn
          command: cd ~/repo/workspace/tilkynna-typescript-axios && yarn build
      - run:
          name: Publish to NPM with Yarn.
          command: cd ~/repo/workspace/tilkynna-typescript-axios && yarn publish --access public

workflows:
  version: 2
  untagged_build_and_test:
    jobs:
      - test
      - static-analysis
      - fossa-scan:
          filters:
            tags:
              only: /^v*.*.*/
            branches:
              only: master
      - license-headers
      - docker-build:
          requires:
          - test
          - static-analysis
          - license-headers
      - generate-axios-client

  tagged_build_push:
    jobs:
      - test: *only-tags
      - static-analysis:
          requires:
          - test
          <<: *only-tags
      - license-headers: *only-tags
      - fossa-scan: *only-tags
      - generate-axios-client: *only-tags
      - docker-build-push:
          requires:
          - test
          - static-analysis
          - license-headers
          - fossa-scan
          - generate-axios-client
          <<: *only-tags
      - publish-axios-client:
          requires:
          - test
          - static-analysis
          - license-headers
          - fossa-scan
          - generate-axios-client
          - docker-build-push
          <<: *only-tags
